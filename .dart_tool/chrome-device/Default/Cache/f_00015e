define(['dart_sdk', 'packages/image/src/color.dart', 'packages/image/src/util/quantizer.dart', 'packages/image/src/image.dart'], (function load__packages__image__src__util__neural_quantizer_dart(dart_sdk, packages__image__src__color$46dart, packages__image__src__util__quantizer$46dart, packages__image__src__image$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _native_typed_data = dart_sdk._native_typed_data;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const color = packages__image__src__color$46dart.src__color;
  const quantizer = packages__image__src__util__quantizer$46dart.src__util__quantizer;
  const image = packages__image__src__image$46dart.src__image;
  var neural_quantizer = Object.create(dart.library);
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $truncate = dartx.truncate;
  var $rightShift = dartx['>>'];
  var $abs = dartx.abs;
  var $toInt = dartx.toInt;
  var $modulo = dartx['%'];
  var $toDouble = dartx.toDouble;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    ListOfdouble: () => (T.ListOfdouble = dart.constFn(core.List$(core.double)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = [
    "file:///C:/Users/shara/Flutter/.pub-cache/hosted/pub.dartlang.org/image-3.0.2/lib/src/util/neural_quantizer.dart",
    "package:image/src/util/neural_quantizer.dart"
  ];
  var samplingFactor$ = dart.privateName(neural_quantizer, "NeuralQuantizer.samplingFactor");
  var netSize = dart.privateName(neural_quantizer, "NeuralQuantizer.netSize");
  var specials = dart.privateName(neural_quantizer, "NeuralQuantizer.specials");
  var maxNetPos = dart.privateName(neural_quantizer, "NeuralQuantizer.maxNetPos");
  var __NeuralQuantizer_colorMap = dart.privateName(neural_quantizer, "_#NeuralQuantizer#colorMap");
  var __NeuralQuantizer_colorMap_isSet = dart.privateName(neural_quantizer, "_#NeuralQuantizer#colorMap#isSet");
  var __NeuralQuantizer_bgColor = dart.privateName(neural_quantizer, "_#NeuralQuantizer#bgColor");
  var __NeuralQuantizer_bgColor_isSet = dart.privateName(neural_quantizer, "_#NeuralQuantizer#bgColor#isSet");
  var __NeuralQuantizer_cutNetSize = dart.privateName(neural_quantizer, "_#NeuralQuantizer#cutNetSize");
  var __NeuralQuantizer_cutNetSize_isSet = dart.privateName(neural_quantizer, "_#NeuralQuantizer#cutNetSize#isSet");
  var __NeuralQuantizer_initRadius = dart.privateName(neural_quantizer, "_#NeuralQuantizer#initRadius");
  var __NeuralQuantizer_initRadius_isSet = dart.privateName(neural_quantizer, "_#NeuralQuantizer#initRadius#isSet");
  var __NeuralQuantizer_initBiasRadius = dart.privateName(neural_quantizer, "_#NeuralQuantizer#initBiasRadius");
  var __NeuralQuantizer_initBiasRadius_isSet = dart.privateName(neural_quantizer, "_#NeuralQuantizer#initBiasRadius#isSet");
  var __NeuralQuantizer__radiusPower = dart.privateName(neural_quantizer, "_#NeuralQuantizer#_radiusPower");
  var __NeuralQuantizer__radiusPower_isSet = dart.privateName(neural_quantizer, "_#NeuralQuantizer#_radiusPower#isSet");
  var __NeuralQuantizer__network = dart.privateName(neural_quantizer, "_#NeuralQuantizer#_network");
  var __NeuralQuantizer__network_isSet = dart.privateName(neural_quantizer, "_#NeuralQuantizer#_network#isSet");
  var __NeuralQuantizer__colorMap = dart.privateName(neural_quantizer, "_#NeuralQuantizer#_colorMap");
  var __NeuralQuantizer__colorMap_isSet = dart.privateName(neural_quantizer, "_#NeuralQuantizer#_colorMap#isSet");
  var _netIndex = dart.privateName(neural_quantizer, "_netIndex");
  var __NeuralQuantizer__bias = dart.privateName(neural_quantizer, "_#NeuralQuantizer#_bias");
  var __NeuralQuantizer__bias_isSet = dart.privateName(neural_quantizer, "_#NeuralQuantizer#_bias#isSet");
  var __NeuralQuantizer__freq = dart.privateName(neural_quantizer, "_#NeuralQuantizer#_freq");
  var __NeuralQuantizer__freq_isSet = dart.privateName(neural_quantizer, "_#NeuralQuantizer#_freq#isSet");
  var _initialize = dart.privateName(neural_quantizer, "_initialize");
  var _learn = dart.privateName(neural_quantizer, "_learn");
  var _fix = dart.privateName(neural_quantizer, "_fix");
  var _inxBuild = dart.privateName(neural_quantizer, "_inxBuild");
  var _copyColorMap = dart.privateName(neural_quantizer, "_copyColorMap");
  var _inxSearch = dart.privateName(neural_quantizer, "_inxSearch");
  var _colorMap = dart.privateName(neural_quantizer, "_colorMap");
  var _radiusPower = dart.privateName(neural_quantizer, "_radiusPower");
  var _network = dart.privateName(neural_quantizer, "_network");
  var _bias = dart.privateName(neural_quantizer, "_bias");
  var _freq = dart.privateName(neural_quantizer, "_freq");
  var _updateRadiusPower = dart.privateName(neural_quantizer, "_updateRadiusPower");
  var _specialFind = dart.privateName(neural_quantizer, "_specialFind");
  var _contest = dart.privateName(neural_quantizer, "_contest");
  var _alterSingle = dart.privateName(neural_quantizer, "_alterSingle");
  var _alterNeighbors = dart.privateName(neural_quantizer, "_alterNeighbors");
  neural_quantizer.NeuralQuantizer = class NeuralQuantizer extends quantizer.Quantizer {
    get samplingFactor() {
      return this[samplingFactor$];
    }
    set samplingFactor(value) {
      this[samplingFactor$] = value;
    }
    get netSize() {
      return this[netSize];
    }
    set netSize(value) {
      this[netSize] = value;
    }
    get specials() {
      return this[specials];
    }
    set specials(value) {
      this[specials] = value;
    }
    get maxNetPos() {
      return this[maxNetPos];
    }
    set maxNetPos(value) {
      this[maxNetPos] = value;
    }
    get colorMap() {
      let t0;
      return dart.test(this[__NeuralQuantizer_colorMap_isSet]) ? (t0 = this[__NeuralQuantizer_colorMap], t0) : dart.throw(new _internal.LateError.fieldNI("colorMap"));
    }
    set colorMap(t0) {
      if (t0 == null) dart.nullFailed(I[0], 34, 18, "null");
      this[__NeuralQuantizer_colorMap_isSet] = true;
      this[__NeuralQuantizer_colorMap] = t0;
    }
    addImage(image) {
      if (image == null) dart.nullFailed(I[0], 49, 23, "image");
      this[_learn](image);
      this[_fix]();
      this[_inxBuild]();
      this[_copyColorMap]();
    }
    get numColors() {
      return this.netSize;
    }
    color(index) {
      if (index == null) dart.nullFailed(I[0], 60, 17, "index");
      return color.getColor(this.colorMap[$_get](dart.notNull(index) * 3), this.colorMap[$_get](dart.notNull(index) * 3 + 1), this.colorMap[$_get](dart.notNull(index) * 3 + 2));
    }
    lookup(c) {
      if (c == null) dart.nullFailed(I[0], 64, 18, "c");
      let r = color.getRed(c);
      let g = color.getGreen(c);
      let b = color.getBlue(c);
      return this[_inxSearch](b, g, r);
    }
    lookupRGB(r, g, b) {
      if (r == null) dart.nullFailed(I[0], 72, 21, "r");
      if (g == null) dart.nullFailed(I[0], 72, 28, "g");
      if (b == null) dart.nullFailed(I[0], 72, 35, "b");
      return this[_inxSearch](b, g, r);
    }
    getQuantizedColor(c) {
      if (c == null) dart.nullFailed(I[0], 76, 29, "c");
      let r = color.getRed(c);
      let g = color.getGreen(c);
      let b = color.getBlue(c);
      let a = color.getAlpha(c);
      let i = dart.notNull(this[_inxSearch](b, g, r)) * 3;
      return color.getColor(this.colorMap[$_get](i), this.colorMap[$_get](i + 1), this.colorMap[$_get](i + 2), a);
    }
    getIndexMap(image) {
      if (image == null) dart.nullFailed(I[0], 86, 31, "image");
      let map = _native_typed_data.NativeUint8List.new(dart.notNull(image.width) * dart.notNull(image.height));
      for (let i = 0, len = image.length; i < dart.notNull(len); i = i + 1) {
        map[$_set](i, this.lookup(image._get(i)));
      }
      return map;
    }
    [_initialize](numberOfColors) {
      let t1, t1$, t1$0;
      if (numberOfColors == null) dart.nullFailed(I[0], 94, 24, "numberOfColors");
      this.netSize = math.max(core.int, numberOfColors, 4);
      this.cutNetSize = dart.notNull(this.netSize) - dart.notNull(this.specials);
      this.maxNetPos = dart.notNull(this.netSize) - 1;
      this.initRadius = (dart.notNull(this.netSize) / 8)[$truncate]();
      this.initBiasRadius = dart.notNull(this.initRadius) * 256;
      this[_colorMap] = _native_typed_data.NativeInt32List.new(dart.notNull(this.netSize) * 4);
      this.colorMap = _native_typed_data.NativeUint8List.new(dart.notNull(this.netSize) * 3);
      this.specials = 3;
      this.bgColor = dart.notNull(this.specials) - 1;
      this[_radiusPower] = _native_typed_data.NativeInt32List.new(this.netSize[$rightShift](3));
      this[_network] = T.ListOfdouble().filled(dart.notNull(this.netSize) * 3, 0.0);
      this[_bias] = T.ListOfdouble().filled(this.netSize, 0.0);
      this[_freq] = T.ListOfdouble().filled(this.netSize, 0.0);
      this[_network][$_set](0, 0.0);
      this[_network][$_set](1, 0.0);
      this[_network][$_set](2, 0.0);
      this[_network][$_set](3, 255.0);
      this[_network][$_set](4, 255.0);
      this[_network][$_set](5, 255.0);
      let f = 1.0 / dart.notNull(this.netSize);
      for (let i = 0; i < dart.notNull(this.specials); i = i + 1) {
        this[_freq][$_set](i, f);
        this[_bias][$_set](i, 0.0);
      }
      for (let i = this.specials, p = dart.notNull(this.specials) * 3; dart.notNull(i) < dart.notNull(this.netSize); i = dart.notNull(i) + 1) {
        this[_network][$_set]((t1 = p, p = t1 + 1, t1), 255.0 * (dart.notNull(i) - dart.notNull(this.specials)) / dart.notNull(this.cutNetSize));
        this[_network][$_set]((t1$ = p, p = t1$ + 1, t1$), 255.0 * (dart.notNull(i) - dart.notNull(this.specials)) / dart.notNull(this.cutNetSize));
        this[_network][$_set]((t1$0 = p, p = t1$0 + 1, t1$0), 255.0 * (dart.notNull(i) - dart.notNull(this.specials)) / dart.notNull(this.cutNetSize));
        this[_freq][$_set](i, f);
        this[_bias][$_set](i, 0.0);
      }
    }
    [_copyColorMap]() {
      let t1, t1$, t1$0;
      for (let i = 0, p = 0, q = 0; i < dart.notNull(this.netSize); i = i + 1) {
        this.colorMap[$_set]((t1 = p, p = t1 + 1, t1), this[_colorMap][$_get](q + 2)[$abs]() & 255);
        this.colorMap[$_set]((t1$ = p, p = t1$ + 1, t1$), this[_colorMap][$_get](q + 1)[$abs]() & 255);
        this.colorMap[$_set]((t1$0 = p, p = t1$0 + 1, t1$0), this[_colorMap][$_get](q)[$abs]() & 255);
        q = q + 4;
      }
    }
    [_inxSearch](b, g, r) {
      if (b == null) dart.nullFailed(I[0], 144, 22, "b");
      if (g == null) dart.nullFailed(I[0], 144, 29, "g");
      if (r == null) dart.nullFailed(I[0], 144, 36, "r");
      let bestd = 1000;
      let best = -1;
      let i = this[_netIndex][$_get](g);
      let j = dart.notNull(i) - 1;
      while (dart.notNull(i) < dart.notNull(this.netSize) || j >= 0) {
        if (dart.notNull(i) < dart.notNull(this.netSize)) {
          let p = dart.notNull(i) * 4;
          let dist = dart.notNull(this[_colorMap][$_get](p + 1)) - dart.notNull(g);
          if (dist >= bestd) {
            i = this.netSize;
          } else {
            if (dist < 0) {
              dist = -dist;
            }
            let a = dart.notNull(this[_colorMap][$_get](p)) - dart.notNull(b);
            if (a < 0) {
              a = -a;
            }
            dist = dist + a;
            if (dist < bestd) {
              a = dart.notNull(this[_colorMap][$_get](p + 2)) - dart.notNull(r);
              if (a < 0) {
                a = -a;
              }
              dist = dist + a;
              if (dist < bestd) {
                bestd = dist;
                best = i;
              }
            }
            i = dart.notNull(i) + 1;
          }
        }
        if (j >= 0) {
          let p = j * 4;
          let dist = dart.notNull(g) - dart.notNull(this[_colorMap][$_get](p + 1));
          if (dist >= bestd) {
            j = -1;
          } else {
            if (dist < 0) {
              dist = -dist;
            }
            let a = dart.notNull(this[_colorMap][$_get](p)) - dart.notNull(b);
            if (a < 0) {
              a = -a;
            }
            dist = dist + a;
            if (dist < bestd) {
              a = dart.notNull(this[_colorMap][$_get](p + 2)) - dart.notNull(r);
              if (a < 0) {
                a = -a;
              }
              dist = dist + a;
              if (dist < bestd) {
                bestd = dist;
                best = j;
              }
            }
            j = j - 1;
          }
        }
      }
      return best;
    }
    [_fix]() {
      for (let i = 0, p = 0, q = 0; i < dart.notNull(this.netSize); i = i + 1, q = q + 4) {
        for (let j = 0; j < 3; j = j + 1, p = p + 1) {
          let x = (0.5 + dart.notNull(this[_network][$_get](p)))[$toInt]();
          if (x < 0) {
            x = 0;
          }
          if (x > 255) {
            x = 255;
          }
          this[_colorMap][$_set](q + j, x);
        }
        this[_colorMap][$_set](q + 3, i);
      }
    }
    [_inxBuild]() {
      let previousColor = 0;
      let startPos = 0;
      for (let i = 0, p = 0; i < dart.notNull(this.netSize); i = i + 1, p = p + 4) {
        let smallpos = i;
        let smallval = this[_colorMap][$_get](p + 1);
        for (let j = i + 1, q = p + 4; j < dart.notNull(this.netSize); j = j + 1, q = q + 4) {
          if (dart.notNull(this[_colorMap][$_get](q + 1)) < dart.notNull(smallval)) {
            smallpos = j;
            smallval = this[_colorMap][$_get](q + 1);
          }
        }
        let q = smallpos * 4;
        if (i !== smallpos) {
          let j = this[_colorMap][$_get](q);
          this[_colorMap][$_set](q, this[_colorMap][$_get](p));
          this[_colorMap][$_set](p, j);
          j = this[_colorMap][$_get](q + 1);
          this[_colorMap][$_set](q + 1, this[_colorMap][$_get](p + 1));
          this[_colorMap][$_set](p + 1, j);
          j = this[_colorMap][$_get](q + 2);
          this[_colorMap][$_set](q + 2, this[_colorMap][$_get](p + 2));
          this[_colorMap][$_set](p + 2, j);
          j = this[_colorMap][$_get](q + 3);
          this[_colorMap][$_set](q + 3, this[_colorMap][$_get](p + 3));
          this[_colorMap][$_set](p + 3, j);
        }
        if (smallval != previousColor) {
          this[_netIndex][$_set](previousColor, (startPos + i)[$rightShift](1));
          for (let j = dart.notNull(previousColor) + 1; j < dart.notNull(smallval); j = j + 1) {
            this[_netIndex][$_set](j, i);
          }
          previousColor = smallval;
          startPos = i;
        }
      }
      this[_netIndex][$_set](previousColor, (startPos + dart.nullCheck(this.maxNetPos))[$rightShift](1));
      for (let j = dart.notNull(previousColor) + 1; j < 256; j = j + 1) {
        this[_netIndex][$_set](j, dart.nullCheck(this.maxNetPos));
      }
    }
    [_updateRadiusPower](rad, alpha) {
      if (rad == null) dart.nullFailed(I[0], 286, 31, "rad");
      if (alpha == null) dart.nullFailed(I[0], 286, 40, "alpha");
      for (let i = 0; i < dart.notNull(rad); i = i + 1) {
        this[_radiusPower][$_set](i, (dart.notNull(alpha) * ((dart.notNull(rad) * dart.notNull(rad) - i * i) * 256 / (dart.notNull(rad) * dart.notNull(rad))))[$toInt]());
      }
    }
    [_learn](image) {
      if (image == null) dart.nullFailed(I[0], 293, 21, "image");
      let biasRadius = this.initBiasRadius;
      let alphaDec = 30 + ((dart.notNull(this.samplingFactor) - 1) / 3)[$truncate]();
      let lengthCount = image.length;
      let samplePixels = (dart.notNull(lengthCount) / dart.notNull(this.samplingFactor))[$truncate]();
      let delta = math.max(core.int, (samplePixels / 100)[$truncate](), 1);
      let alpha = 1024;
      if (delta === 0) {
        delta = 1;
      }
      let rad = biasRadius[$rightShift](8);
      if (rad <= 1) {
        rad = 0;
      }
      this[_updateRadiusPower](rad, alpha);
      let step = 0;
      let pos = 0;
      if (dart.notNull(lengthCount) < 1509) {
        this.samplingFactor = 1;
        step = 1;
      } else if (lengthCount[$modulo](499) !== 0) {
        step = 499;
      } else {
        if (lengthCount[$modulo](491) !== 0) {
          step = 491;
        } else {
          if (lengthCount[$modulo](487) !== 0) {
            step = 487;
          } else {
            step = 503;
          }
        }
      }
      let i = 0;
      while (i < samplePixels) {
        let p = image._get(pos);
        let red = color.getRed(p);
        let green = color.getGreen(p);
        let blue = color.getBlue(p);
        let b = blue[$toDouble]();
        let g = green[$toDouble]();
        let r = red[$toDouble]();
        if (i === 0) {
          this[_network][$_set](dart.notNull(this.bgColor) * 3, b);
          this[_network][$_set](dart.notNull(this.bgColor) * 3 + 1, g);
          this[_network][$_set](dart.notNull(this.bgColor) * 3 + 2, r);
        }
        let j = this[_specialFind](b, g, r);
        j = dart.notNull(j) < 0 ? this[_contest](b, g, r) : j;
        if (dart.notNull(j) >= dart.notNull(this.specials)) {
          let a = 1.0 * alpha / 1024;
          this[_alterSingle](a, j, b, g, r);
          if (rad > 0) {
            this[_alterNeighbors](a, rad, j, b, g, r);
          }
        }
        pos = pos + step;
        while (pos >= dart.notNull(lengthCount)) {
          pos = pos - dart.notNull(lengthCount);
        }
        i = i + 1;
        if (i[$modulo](delta) === 0) {
          alpha = alpha - (alpha / alphaDec)[$truncate]();
          biasRadius = dart.notNull(biasRadius) - (dart.notNull(biasRadius) / 30)[$truncate]();
          rad = biasRadius[$rightShift](8);
          if (rad <= 1) {
            rad = 0;
          }
          this[_updateRadiusPower](rad, alpha);
        }
      }
    }
    [_alterSingle](alpha, i, b, g, r) {
      let t1, t2, t1$, t2$, t1$0;
      if (alpha == null) dart.nullFailed(I[0], 378, 28, "alpha");
      if (i == null) dart.nullFailed(I[0], 378, 39, "i");
      if (b == null) dart.nullFailed(I[0], 378, 49, "b");
      if (g == null) dart.nullFailed(I[0], 378, 59, "g");
      if (r == null) dart.nullFailed(I[0], 378, 69, "r");
      let p = dart.notNull(i) * 3;
      t1 = this[_network];
      t1[$_set](p, dart.notNull(t1[$_get](p)) - dart.notNull(alpha) * (dart.notNull(this[_network][$_get](p)) - dart.notNull(b)));
      t1$ = this[_network];
      t2 = p + 1;
      t1$[$_set](t2, dart.notNull(t1$[$_get](t2)) - dart.notNull(alpha) * (dart.notNull(this[_network][$_get](p + 1)) - dart.notNull(g)));
      t1$0 = this[_network];
      t2$ = p + 2;
      t1$0[$_set](t2$, dart.notNull(t1$0[$_get](t2$)) - dart.notNull(alpha) * (dart.notNull(this[_network][$_get](p + 2)) - dart.notNull(r)));
    }
    [_alterNeighbors](alpha, rad, i, b, g, r) {
      let t1, t1$, t2, t1$0, t2$, t1$1, t1$2, t2$0, t1$3, t2$1, t1$4;
      if (alpha == null) dart.nullFailed(I[0], 386, 31, "alpha");
      if (rad == null) dart.nullFailed(I[0], 386, 42, "rad");
      if (i == null) dart.nullFailed(I[0], 386, 51, "i");
      if (b == null) dart.nullFailed(I[0], 387, 31, "b");
      if (g == null) dart.nullFailed(I[0], 387, 41, "g");
      if (r == null) dart.nullFailed(I[0], 387, 51, "r");
      let lo = dart.notNull(i) - dart.notNull(rad);
      if (lo < dart.notNull(this.specials) - 1) {
        lo = dart.notNull(this.specials) - 1;
      }
      let hi = dart.notNull(i) + dart.notNull(rad);
      if (dart.notNull(hi) > dart.notNull(this.netSize)) {
        hi = this.netSize;
      }
      let j = dart.notNull(i) + 1;
      let k = dart.notNull(i) - 1;
      let m = 1;
      while (j < dart.notNull(hi) || k > lo) {
        let a = this[_radiusPower][$_get]((t1 = m, m = t1 + 1, t1));
        if (j < dart.notNull(hi)) {
          let p = j * 3;
          t1$ = this[_network];
          t1$[$_set](p, dart.notNull(t1$[$_get](p)) - dart.notNull(a) * (dart.notNull(this[_network][$_get](p)) - dart.notNull(b)) / 262144);
          t1$0 = this[_network];
          t2 = p + 1;
          t1$0[$_set](t2, dart.notNull(t1$0[$_get](t2)) - dart.notNull(a) * (dart.notNull(this[_network][$_get](p + 1)) - dart.notNull(g)) / 262144);
          t1$1 = this[_network];
          t2$ = p + 2;
          t1$1[$_set](t2$, dart.notNull(t1$1[$_get](t2$)) - dart.notNull(a) * (dart.notNull(this[_network][$_get](p + 2)) - dart.notNull(r)) / 262144);
          j = j + 1;
        }
        if (k > lo) {
          let p = k * 3;
          t1$2 = this[_network];
          t1$2[$_set](p, dart.notNull(t1$2[$_get](p)) - dart.notNull(a) * (dart.notNull(this[_network][$_get](p)) - dart.notNull(b)) / 262144);
          t1$3 = this[_network];
          t2$0 = p + 1;
          t1$3[$_set](t2$0, dart.notNull(t1$3[$_get](t2$0)) - dart.notNull(a) * (dart.notNull(this[_network][$_get](p + 1)) - dart.notNull(g)) / 262144);
          t1$4 = this[_network];
          t2$1 = p + 2;
          t1$4[$_set](t2$1, dart.notNull(t1$4[$_get](t2$1)) - dart.notNull(a) * (dart.notNull(this[_network][$_get](p + 2)) - dart.notNull(r)) / 262144);
          k = k - 1;
        }
      }
    }
    [_contest](b, g, r) {
      let t1, t1$, t1$0, t2, t1$1, t2$, t1$2, t2$0, t1$3, t2$1, t1$4;
      if (b == null) dart.nullFailed(I[0], 421, 23, "b");
      if (g == null) dart.nullFailed(I[0], 421, 33, "g");
      if (r == null) dart.nullFailed(I[0], 421, 43, "r");
      let bestd = 1e+30;
      let bestBiasDist = bestd;
      let bestpos = -1;
      let bestbiaspos = bestpos;
      for (let i = this.specials, p = dart.notNull(this.specials) * 3; dart.notNull(i) < dart.notNull(this.netSize); i = dart.notNull(i) + 1) {
        let dist = dart.notNull(this[_network][$_get]((t1 = p, p = t1 + 1, t1))) - dart.notNull(b);
        if (dist < 0) {
          dist = -dist;
        }
        let a = dart.notNull(this[_network][$_get]((t1$ = p, p = t1$ + 1, t1$))) - dart.notNull(g);
        if (a < 0) {
          a = -a;
        }
        dist = dist + a;
        a = dart.notNull(this[_network][$_get]((t1$0 = p, p = t1$0 + 1, t1$0))) - dart.notNull(r);
        if (a < 0) {
          a = -a;
        }
        dist = dist + a;
        if (dist < bestd) {
          bestd = dist;
          bestpos = i;
        }
        let biasDist = dist - dart.notNull(this[_bias][$_get](i));
        if (biasDist < bestBiasDist) {
          bestBiasDist = biasDist;
          bestbiaspos = i;
        }
        t1$1 = this[_freq];
        t2 = i;
        t1$1[$_set](t2, dart.notNull(t1$1[$_get](t2)) - 0.0009765625 * dart.notNull(this[_freq][$_get](i)));
        t1$2 = this[_bias];
        t2$ = i;
        t1$2[$_set](t2$, dart.notNull(t1$2[$_get](t2$)) + 1 * dart.notNull(this[_freq][$_get](i)));
      }
      t1$3 = this[_freq];
      t2$0 = bestpos;
      t1$3[$_set](t2$0, dart.notNull(t1$3[$_get](t2$0)) + 0.0009765625);
      t1$4 = this[_bias];
      t2$1 = bestpos;
      t1$4[$_set](t2$1, dart.notNull(t1$4[$_get](t2$1)) - 1);
      return bestbiaspos;
    }
    [_specialFind](b, g, r) {
      let t1, t1$, t1$0;
      if (b == null) dart.nullFailed(I[0], 465, 27, "b");
      if (g == null) dart.nullFailed(I[0], 465, 37, "g");
      if (r == null) dart.nullFailed(I[0], 465, 47, "r");
      for (let i = 0, p = 0; i < dart.notNull(this.specials); i = i + 1) {
        if (this[_network][$_get]((t1 = p, p = t1 + 1, t1)) == b && this[_network][$_get]((t1$ = p, p = t1$ + 1, t1$)) == g && this[_network][$_get]((t1$0 = p, p = t1$0 + 1, t1$0)) == r) {
          return i;
        }
      }
      return -1;
    }
    get bgColor() {
      let t1;
      return dart.test(this[__NeuralQuantizer_bgColor_isSet]) ? (t1 = this[__NeuralQuantizer_bgColor], t1) : dart.throw(new _internal.LateError.fieldNI("bgColor"));
    }
    set bgColor(t1) {
      if (t1 == null) dart.nullFailed(I[0], 478, 12, "null");
      this[__NeuralQuantizer_bgColor_isSet] = true;
      this[__NeuralQuantizer_bgColor] = t1;
    }
    get cutNetSize() {
      let t2;
      return dart.test(this[__NeuralQuantizer_cutNetSize_isSet]) ? (t2 = this[__NeuralQuantizer_cutNetSize], t2) : dart.throw(new _internal.LateError.fieldNI("cutNetSize"));
    }
    set cutNetSize(t2) {
      if (t2 == null) dart.nullFailed(I[0], 479, 12, "null");
      this[__NeuralQuantizer_cutNetSize_isSet] = true;
      this[__NeuralQuantizer_cutNetSize] = t2;
    }
    set initRadius(t3) {
      if (t3 == null) dart.nullFailed(I[0], 485, 12, "null");
      this[__NeuralQuantizer_initRadius_isSet] = true;
      this[__NeuralQuantizer_initRadius] = t3;
    }
    get initRadius() {
      let t4;
      return dart.test(this[__NeuralQuantizer_initRadius_isSet]) ? (t4 = this[__NeuralQuantizer_initRadius], t4) : dart.throw(new _internal.LateError.fieldNI("initRadius"));
    }
    get initBiasRadius() {
      let t4;
      return dart.test(this[__NeuralQuantizer_initBiasRadius_isSet]) ? (t4 = this[__NeuralQuantizer_initBiasRadius], t4) : dart.throw(new _internal.LateError.fieldNI("initBiasRadius"));
    }
    set initBiasRadius(t4) {
      if (t4 == null) dart.nullFailed(I[0], 490, 12, "null");
      this[__NeuralQuantizer_initBiasRadius_isSet] = true;
      this[__NeuralQuantizer_initBiasRadius] = t4;
    }
    get [_radiusPower]() {
      let t5;
      return dart.test(this[__NeuralQuantizer__radiusPower_isSet]) ? (t5 = this[__NeuralQuantizer__radiusPower], t5) : dart.throw(new _internal.LateError.fieldNI("_radiusPower"));
    }
    set [_radiusPower](t5) {
      if (t5 == null) dart.nullFailed(I[0], 492, 18, "null");
      this[__NeuralQuantizer__radiusPower_isSet] = true;
      this[__NeuralQuantizer__radiusPower] = t5;
    }
    get [_network]() {
      let t6;
      return dart.test(this[__NeuralQuantizer__network_isSet]) ? (t6 = this[__NeuralQuantizer__network], t6) : dart.throw(new _internal.LateError.fieldNI("_network"));
    }
    set [_network](t6) {
      if (t6 == null) dart.nullFailed(I[0], 499, 21, "null");
      this[__NeuralQuantizer__network_isSet] = true;
      this[__NeuralQuantizer__network] = t6;
    }
    get [_colorMap]() {
      let t7;
      return dart.test(this[__NeuralQuantizer__colorMap_isSet]) ? (t7 = this[__NeuralQuantizer__colorMap], t7) : dart.throw(new _internal.LateError.fieldNI("_colorMap"));
    }
    set [_colorMap](t7) {
      if (t7 == null) dart.nullFailed(I[0], 500, 18, "null");
      this[__NeuralQuantizer__colorMap_isSet] = true;
      this[__NeuralQuantizer__colorMap] = t7;
    }
    get [_bias]() {
      let t8;
      return dart.test(this[__NeuralQuantizer__bias_isSet]) ? (t8 = this[__NeuralQuantizer__bias], t8) : dart.throw(new _internal.LateError.fieldNI("_bias"));
    }
    set [_bias](t8) {
      if (t8 == null) dart.nullFailed(I[0], 503, 21, "null");
      this[__NeuralQuantizer__bias_isSet] = true;
      this[__NeuralQuantizer__bias] = t8;
    }
    get [_freq]() {
      let t9;
      return dart.test(this[__NeuralQuantizer__freq_isSet]) ? (t9 = this[__NeuralQuantizer__freq], t9) : dart.throw(new _internal.LateError.fieldNI("_freq"));
    }
    set [_freq](t9) {
      if (t9 == null) dart.nullFailed(I[0], 504, 21, "null");
      this[__NeuralQuantizer__freq_isSet] = true;
      this[__NeuralQuantizer__freq] = t9;
    }
  };
  (neural_quantizer.NeuralQuantizer.new = function(image, opts) {
    if (image == null) dart.nullFailed(I[0], 40, 25, "image");
    let numberOfColors = opts && 'numberOfColors' in opts ? opts.numberOfColors : 256;
    if (numberOfColors == null) dart.nullFailed(I[0], 41, 12, "numberOfColors");
    let samplingFactor = opts && 'samplingFactor' in opts ? opts.samplingFactor : 10;
    if (samplingFactor == null) dart.nullFailed(I[0], 41, 39, "samplingFactor");
    this[__NeuralQuantizer_colorMap] = null;
    this[__NeuralQuantizer_colorMap_isSet] = false;
    this[netSize] = 16;
    this[specials] = 3;
    this[__NeuralQuantizer_bgColor] = null;
    this[__NeuralQuantizer_bgColor_isSet] = false;
    this[__NeuralQuantizer_cutNetSize] = null;
    this[__NeuralQuantizer_cutNetSize_isSet] = false;
    this[maxNetPos] = null;
    this[__NeuralQuantizer_initRadius] = null;
    this[__NeuralQuantizer_initRadius_isSet] = false;
    this[__NeuralQuantizer_initBiasRadius] = null;
    this[__NeuralQuantizer_initBiasRadius_isSet] = false;
    this[__NeuralQuantizer__radiusPower] = null;
    this[__NeuralQuantizer__radiusPower_isSet] = false;
    this[__NeuralQuantizer__network] = null;
    this[__NeuralQuantizer__network_isSet] = false;
    this[__NeuralQuantizer__colorMap] = null;
    this[__NeuralQuantizer__colorMap_isSet] = false;
    this[_netIndex] = _native_typed_data.NativeInt32List.new(256);
    this[__NeuralQuantizer__bias] = null;
    this[__NeuralQuantizer__bias_isSet] = false;
    this[__NeuralQuantizer__freq] = null;
    this[__NeuralQuantizer__freq_isSet] = false;
    this[samplingFactor$] = samplingFactor;
    this[_initialize](numberOfColors);
    this.addImage(image);
  }).prototype = neural_quantizer.NeuralQuantizer.prototype;
  dart.addTypeTests(neural_quantizer.NeuralQuantizer);
  dart.addTypeCaches(neural_quantizer.NeuralQuantizer);
  dart.setMethodSignature(neural_quantizer.NeuralQuantizer, () => ({
    __proto__: dart.getMethods(neural_quantizer.NeuralQuantizer.__proto__),
    addImage: dart.fnType(dart.void, [image.Image]),
    color: dart.fnType(core.int, [core.int]),
    lookup: dart.fnType(core.int, [core.int]),
    lookupRGB: dart.fnType(core.int, [core.int, core.int, core.int]),
    getQuantizedColor: dart.fnType(core.int, [core.int]),
    getIndexMap: dart.fnType(typed_data.Uint8List, [image.Image]),
    [_initialize]: dart.fnType(dart.void, [core.int]),
    [_copyColorMap]: dart.fnType(dart.void, []),
    [_inxSearch]: dart.fnType(core.int, [core.int, core.int, core.int]),
    [_fix]: dart.fnType(dart.void, []),
    [_inxBuild]: dart.fnType(dart.void, []),
    [_updateRadiusPower]: dart.fnType(dart.void, [core.int, core.int]),
    [_learn]: dart.fnType(dart.void, [image.Image]),
    [_alterSingle]: dart.fnType(dart.void, [core.double, core.int, core.double, core.double, core.double]),
    [_alterNeighbors]: dart.fnType(dart.void, [core.double, core.int, core.int, core.double, core.double, core.double]),
    [_contest]: dart.fnType(core.int, [core.double, core.double, core.double]),
    [_specialFind]: dart.fnType(core.int, [core.double, core.double, core.double])
  }));
  dart.setGetterSignature(neural_quantizer.NeuralQuantizer, () => ({
    __proto__: dart.getGetters(neural_quantizer.NeuralQuantizer.__proto__),
    colorMap: typed_data.Uint8List,
    numColors: core.int,
    bgColor: core.int,
    cutNetSize: core.int,
    initRadius: core.int,
    initBiasRadius: core.int,
    [_radiusPower]: typed_data.Int32List,
    [_network]: core.List$(core.double),
    [_colorMap]: typed_data.Int32List,
    [_bias]: core.List$(core.double),
    [_freq]: core.List$(core.double)
  }));
  dart.setSetterSignature(neural_quantizer.NeuralQuantizer, () => ({
    __proto__: dart.getSetters(neural_quantizer.NeuralQuantizer.__proto__),
    colorMap: typed_data.Uint8List,
    bgColor: core.int,
    cutNetSize: core.int,
    initRadius: core.int,
    initBiasRadius: core.int,
    [_radiusPower]: typed_data.Int32List,
    [_network]: core.List$(core.double),
    [_colorMap]: typed_data.Int32List,
    [_bias]: core.List$(core.double),
    [_freq]: core.List$(core.double)
  }));
  dart.setLibraryUri(neural_quantizer.NeuralQuantizer, I[1]);
  dart.setFieldSignature(neural_quantizer.NeuralQuantizer, () => ({
    __proto__: dart.getFields(neural_quantizer.NeuralQuantizer.__proto__),
    [__NeuralQuantizer_colorMap]: dart.fieldType(dart.nullable(typed_data.Uint8List)),
    [__NeuralQuantizer_colorMap_isSet]: dart.fieldType(core.bool),
    samplingFactor: dart.fieldType(core.int),
    netSize: dart.fieldType(core.int),
    specials: dart.fieldType(core.int),
    [__NeuralQuantizer_bgColor]: dart.fieldType(dart.nullable(core.int)),
    [__NeuralQuantizer_bgColor_isSet]: dart.fieldType(core.bool),
    [__NeuralQuantizer_cutNetSize]: dart.fieldType(dart.nullable(core.int)),
    [__NeuralQuantizer_cutNetSize_isSet]: dart.fieldType(core.bool),
    maxNetPos: dart.fieldType(dart.nullable(core.int)),
    [__NeuralQuantizer_initRadius]: dart.fieldType(dart.nullable(core.int)),
    [__NeuralQuantizer_initRadius_isSet]: dart.fieldType(core.bool),
    [__NeuralQuantizer_initBiasRadius]: dart.fieldType(dart.nullable(core.int)),
    [__NeuralQuantizer_initBiasRadius_isSet]: dart.fieldType(core.bool),
    [__NeuralQuantizer__radiusPower]: dart.fieldType(dart.nullable(typed_data.Int32List)),
    [__NeuralQuantizer__radiusPower_isSet]: dart.fieldType(core.bool),
    [__NeuralQuantizer__network]: dart.fieldType(dart.nullable(core.List$(core.double))),
    [__NeuralQuantizer__network_isSet]: dart.fieldType(core.bool),
    [__NeuralQuantizer__colorMap]: dart.fieldType(dart.nullable(typed_data.Int32List)),
    [__NeuralQuantizer__colorMap_isSet]: dart.fieldType(core.bool),
    [_netIndex]: dart.finalFieldType(typed_data.Int32List),
    [__NeuralQuantizer__bias]: dart.fieldType(dart.nullable(core.List$(core.double))),
    [__NeuralQuantizer__bias_isSet]: dart.fieldType(core.bool),
    [__NeuralQuantizer__freq]: dart.fieldType(dart.nullable(core.List$(core.double))),
    [__NeuralQuantizer__freq_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(neural_quantizer.NeuralQuantizer, {
    /*neural_quantizer.NeuralQuantizer.numCycles*/get numCycles() {
      return 100;
    },
    /*neural_quantizer.NeuralQuantizer.alphaBiasShift*/get alphaBiasShift() {
      return 10;
    },
    /*neural_quantizer.NeuralQuantizer.initAlpha*/get initAlpha() {
      return 1024;
    },
    /*neural_quantizer.NeuralQuantizer.radiusBiasShift*/get radiusBiasShift() {
      return 8;
    },
    /*neural_quantizer.NeuralQuantizer.radiusBias*/get radiusBias() {
      return 256;
    },
    /*neural_quantizer.NeuralQuantizer.alphaRadiusBiasShift*/get alphaRadiusBiasShift() {
      return 18;
    },
    /*neural_quantizer.NeuralQuantizer.alphaRadiusBias*/get alphaRadiusBias() {
      return 262144;
    },
    /*neural_quantizer.NeuralQuantizer.radiusDec*/get radiusDec() {
      return 30;
    },
    /*neural_quantizer.NeuralQuantizer.gamma*/get gamma() {
      return 1024;
    },
    /*neural_quantizer.NeuralQuantizer.beta*/get beta() {
      return 0.0009765625;
    },
    /*neural_quantizer.NeuralQuantizer.betaGamma*/get betaGamma() {
      return 1;
    },
    /*neural_quantizer.NeuralQuantizer.prime1*/get prime1() {
      return 499;
    },
    /*neural_quantizer.NeuralQuantizer.prime2*/get prime2() {
      return 491;
    },
    /*neural_quantizer.NeuralQuantizer.prime3*/get prime3() {
      return 487;
    },
    /*neural_quantizer.NeuralQuantizer.prime4*/get prime4() {
      return 503;
    },
    /*neural_quantizer.NeuralQuantizer.maxPrime*/get maxPrime() {
      return 503;
    },
    /*neural_quantizer.NeuralQuantizer.smallImageBytes*/get smallImageBytes() {
      return 1509;
    }
  }, false);
  dart.trackLibraries("packages/image/src/util/neural_quantizer.dart", {
    "package:image/src/util/neural_quantizer.dart": neural_quantizer
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["neural_quantizer.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../D:/packages/image/src/util/neural_quantizer.dart.lib.js"}');
  // Exports:
  return {
    src__util__neural_quantizer: neural_quantizer
  };
}));

//# sourceMappingURL=neural_quantizer.dart.lib.js.map
