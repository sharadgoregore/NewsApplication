define(['dart_sdk', 'packages/image/src/internal/bit_operators.dart', 'packages/image/src/image_exception.dart'], (function load__packages__image__src__util__input_buffer_dart(dart_sdk, packages__image__src__internal__bit_operators$46dart, packages__image__src__image_exception$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const bit_operators = packages__image__src__internal__bit_operators$46dart.src__internal__bit_operators;
  const image_exception = packages__image__src__image_exception$46dart.src__image_exception;
  var input_buffer = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $setRange = dartx.setRange;
  var $fillRange = dartx.fillRange;
  var $add = dartx.add;
  var $leftShift = dartx['<<'];
  var $sublist = dartx.sublist;
  var $buffer = dartx.buffer;
  var $offsetInBytes = dartx.offsetInBytes;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = [
    "file:///C:/Users/shara/Flutter/.pub-cache/hosted/pub.dartlang.org/image-3.0.2/lib/src/util/input_buffer.dart",
    "package:image/src/util/input_buffer.dart"
  ];
  var buffer$ = dart.privateName(input_buffer, "InputBuffer.buffer");
  var start = dart.privateName(input_buffer, "InputBuffer.start");
  var end = dart.privateName(input_buffer, "InputBuffer.end");
  var offset$ = dart.privateName(input_buffer, "InputBuffer.offset");
  var bigEndian$ = dart.privateName(input_buffer, "InputBuffer.bigEndian");
  input_buffer.InputBuffer = class InputBuffer extends core.Object {
    get buffer() {
      return this[buffer$];
    }
    set buffer(value) {
      this[buffer$] = value;
    }
    get start() {
      return this[start];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end];
    }
    set end(value) {
      super.end = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      this[offset$] = value;
    }
    get bigEndian() {
      return this[bigEndian$];
    }
    set bigEndian(value) {
      this[bigEndian$] = value;
    }
    get position() {
      return dart.notNull(this.offset) - dart.notNull(this.start);
    }
    get length() {
      return dart.notNull(this.end) - dart.notNull(this.offset);
    }
    get isEOS() {
      return dart.notNull(this.offset) >= dart.notNull(this.end);
    }
    rewind() {
      this.offset = this.start;
    }
    _get(index) {
      if (index == null) dart.nullFailed(I[0], 43, 23, "index");
      return this.buffer[$_get](dart.notNull(this.offset) + dart.notNull(index));
    }
    _set(index, value$) {
      let value = value$;
      let t2, t1, t0;
      if (index == null) dart.nullFailed(I[0], 46, 20, "index");
      if (value == null) dart.nullFailed(I[0], 46, 31, "value");
      t0 = this.buffer;
      t1 = dart.notNull(this.offset) + dart.notNull(index);
      t2 = value;
      t0[$_set](t1, t2);
      t2;
      return value$;
    }
    memcpy(start, length, other, offset = 0) {
      if (start == null) dart.nullFailed(I[0], 51, 19, "start");
      if (length == null) dart.nullFailed(I[0], 51, 30, "length");
      if (offset == null) dart.nullFailed(I[0], 51, 58, "offset");
      if (input_buffer.InputBuffer.is(other)) {
        this.buffer[$setRange](dart.notNull(this.offset) + dart.notNull(start), dart.notNull(this.offset) + dart.notNull(start) + dart.notNull(length), other.buffer, dart.notNull(other.offset) + dart.notNull(offset));
      } else {
        this.buffer[$setRange](dart.notNull(this.offset) + dart.notNull(start), dart.notNull(this.offset) + dart.notNull(start) + dart.notNull(length), T.ListOfint().as(other), offset);
      }
    }
    memset(start, length, value) {
      if (start == null) dart.nullFailed(I[0], 63, 19, "start");
      if (length == null) dart.nullFailed(I[0], 63, 30, "length");
      if (value == null) dart.nullFailed(I[0], 63, 42, "value");
      this.buffer[$fillRange](dart.notNull(this.offset) + dart.notNull(start), dart.notNull(this.offset) + dart.notNull(start) + dart.notNull(length), value);
    }
    subset(count, opts) {
      if (count == null) dart.nullFailed(I[0], 72, 26, "count");
      let position = opts && 'position' in opts ? opts.position : null;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      if (offset == null) dart.nullFailed(I[0], 72, 53, "offset");
      let pos = position != null ? dart.notNull(this.start) + dart.notNull(position) : this.offset;
      pos = dart.notNull(pos) + dart.notNull(offset);
      return new input_buffer.InputBuffer.new(this.buffer, {bigEndian: this.bigEndian, offset: pos, length: count});
    }
    indexOf(value, offset = 0) {
      if (value == null) dart.nullFailed(I[0], 84, 19, "value");
      if (offset == null) dart.nullFailed(I[0], 84, 31, "offset");
      for (let i = dart.notNull(this.offset) + dart.notNull(offset), end = dart.notNull(this.offset) + dart.notNull(this.length); i < end; i = i + 1) {
        if (this.buffer[$_get](i) == value) {
          return i - dart.notNull(this.start);
        }
      }
      return -1;
    }
    peekBytes(count, offset = 0) {
      if (count == null) dart.nullFailed(I[0], 97, 29, "count");
      if (offset == null) dart.nullFailed(I[0], 97, 41, "offset");
      return this.subset(count, {offset: offset});
    }
    skip(count) {
      if (count == null) dart.nullFailed(I[0], 101, 17, "count");
      this.offset = dart.notNull(this.offset) + dart.notNull(count);
    }
    readByte() {
      let t0;
      return this.buffer[$_get]((t0 = this.offset, this.offset = dart.notNull(t0) + 1, t0));
    }
    readInt8() {
      return bit_operators.uint8ToInt8(this.readByte());
    }
    readBytes(count) {
      if (count == null) dart.nullFailed(I[0], 111, 29, "count");
      let bytes = this.subset(count);
      this.offset = dart.notNull(this.offset) + dart.notNull(bytes.length);
      return bytes;
    }
    readString(len = null) {
      if (len == null) {
        let codes = T.JSArrayOfint().of([]);
        while (!dart.test(this.isEOS)) {
          let c = this.readByte();
          if (c === 0) {
            return core.String.fromCharCodes(codes);
          }
          codes[$add](c);
        }
        dart.throw(new image_exception.ImageException.new("EOF reached without finding string terminator"));
      }
      let s = this.readBytes(len);
      let bytes = s.toUint8List();
      let str = core.String.fromCharCodes(bytes);
      return str;
    }
    readUint16() {
      let t0, t0$;
      let b1 = dart.notNull(this.buffer[$_get]((t0 = this.offset, this.offset = dart.notNull(t0) + 1, t0))) & 255;
      let b2 = dart.notNull(this.buffer[$_get]((t0$ = this.offset, this.offset = dart.notNull(t0$) + 1, t0$))) & 255;
      if (dart.test(this.bigEndian)) {
        return (b1 << 8 | b2) >>> 0;
      }
      return (b2 << 8 | b1) >>> 0;
    }
    readInt16() {
      return bit_operators.uint16ToInt16(this.readUint16());
    }
    readUint24() {
      let t0, t0$, t0$0;
      let b1 = dart.notNull(this.buffer[$_get]((t0 = this.offset, this.offset = dart.notNull(t0) + 1, t0))) & 255;
      let b2 = dart.notNull(this.buffer[$_get]((t0$ = this.offset, this.offset = dart.notNull(t0$) + 1, t0$))) & 255;
      let b3 = dart.notNull(this.buffer[$_get]((t0$0 = this.offset, this.offset = dart.notNull(t0$0) + 1, t0$0))) & 255;
      if (dart.test(this.bigEndian)) {
        return (b3 | b2 << 8 >>> 0 | b1 << 16 >>> 0) >>> 0;
      }
      return (b1 | b2 << 8 >>> 0 | b3 << 16 >>> 0) >>> 0;
    }
    readUint32() {
      let t0, t0$, t0$0, t0$1;
      let b1 = dart.notNull(this.buffer[$_get]((t0 = this.offset, this.offset = dart.notNull(t0) + 1, t0))) & 255;
      let b2 = dart.notNull(this.buffer[$_get]((t0$ = this.offset, this.offset = dart.notNull(t0$) + 1, t0$))) & 255;
      let b3 = dart.notNull(this.buffer[$_get]((t0$0 = this.offset, this.offset = dart.notNull(t0$0) + 1, t0$0))) & 255;
      let b4 = dart.notNull(this.buffer[$_get]((t0$1 = this.offset, this.offset = dart.notNull(t0$1) + 1, t0$1))) & 255;
      if (dart.test(this.bigEndian)) {
        return (b1 << 24 | b2 << 16 >>> 0 | b3 << 8 >>> 0 | b4) >>> 0;
      }
      return (b4 << 24 | b3 << 16 >>> 0 | b2 << 8 >>> 0 | b1) >>> 0;
    }
    readInt32() {
      return bit_operators.uint32ToInt32(this.readUint32());
    }
    readFloat32() {
      return bit_operators.uint32ToFloat32(this.readUint32());
    }
    readFloat64() {
      return bit_operators.uint64ToFloat64(this.readUint64());
    }
    readUint64() {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5;
      let b1 = dart.notNull(this.buffer[$_get]((t0 = this.offset, this.offset = dart.notNull(t0) + 1, t0))) & 255;
      let b2 = dart.notNull(this.buffer[$_get]((t0$ = this.offset, this.offset = dart.notNull(t0$) + 1, t0$))) & 255;
      let b3 = dart.notNull(this.buffer[$_get]((t0$0 = this.offset, this.offset = dart.notNull(t0$0) + 1, t0$0))) & 255;
      let b4 = dart.notNull(this.buffer[$_get]((t0$1 = this.offset, this.offset = dart.notNull(t0$1) + 1, t0$1))) & 255;
      let b5 = dart.notNull(this.buffer[$_get]((t0$2 = this.offset, this.offset = dart.notNull(t0$2) + 1, t0$2))) & 255;
      let b6 = dart.notNull(this.buffer[$_get]((t0$3 = this.offset, this.offset = dart.notNull(t0$3) + 1, t0$3))) & 255;
      let b7 = dart.notNull(this.buffer[$_get]((t0$4 = this.offset, this.offset = dart.notNull(t0$4) + 1, t0$4))) & 255;
      let b8 = dart.notNull(this.buffer[$_get]((t0$5 = this.offset, this.offset = dart.notNull(t0$5) + 1, t0$5))) & 255;
      if (dart.test(this.bigEndian)) {
        return (b1[$leftShift](56) | b2[$leftShift](48) | b3[$leftShift](40) | b4[$leftShift](32) | b5 << 24 >>> 0 | b6 << 16 >>> 0 | b7 << 8 >>> 0 | b8) >>> 0;
      }
      return (b8[$leftShift](56) | b7[$leftShift](48) | b6[$leftShift](40) | b5[$leftShift](32) | b4 << 24 >>> 0 | b3 << 16 >>> 0 | b2 << 8 >>> 0 | b1) >>> 0;
    }
    toList(offset = 0, length = 0) {
      if (offset == null) dart.nullFailed(I[0], 213, 25, "offset");
      if (length == null) dart.nullFailed(I[0], 213, 41, "length");
      if (typed_data.Uint8List.is(this.buffer)) {
        return this.toUint8List(offset, length);
      }
      let s = dart.notNull(this.start) + dart.notNull(offset) + dart.notNull(offset);
      let e = dart.notNull(length) <= 0 ? this.end : s + dart.notNull(length);
      return this.buffer[$sublist](s, e);
    }
    toUint8List(offset = 0, length = null) {
      let t0;
      if (offset == null) dart.nullFailed(I[0], 222, 30, "offset");
      let len = (t0 = length, t0 == null ? dart.notNull(this.length) - dart.notNull(offset) : t0);
      if (typed_data.Uint8List.is(this.buffer)) {
        let b = typed_data.Uint8List.as(this.buffer);
        return typed_data.Uint8List.view(b[$buffer], dart.notNull(b[$offsetInBytes]) + dart.notNull(this.offset) + dart.notNull(offset), len);
      }
      return typed_data.Uint8List.is(this.buffer) ? typed_data.Uint8List.as(this.buffer)[$sublist](dart.notNull(this.offset) + dart.notNull(offset), dart.notNull(this.offset) + dart.notNull(offset) + dart.notNull(len)) : _native_typed_data.NativeUint8List.fromList(this.buffer[$sublist](dart.notNull(this.offset) + dart.notNull(offset), dart.notNull(this.offset) + dart.notNull(offset) + dart.notNull(len)));
    }
    toUint32List(offset = 0) {
      if (offset == null) dart.nullFailed(I[0], 236, 32, "offset");
      if (typed_data.Uint8List.is(this.buffer)) {
        let b = typed_data.Uint8List.as(this.buffer);
        return typed_data.Uint32List.view(b[$buffer], dart.notNull(b[$offsetInBytes]) + dart.notNull(this.offset) + dart.notNull(offset));
      }
      return typed_data.Uint32List.view(this.toUint8List()[$buffer]);
    }
  };
  (input_buffer.InputBuffer.new = function(buffer, opts) {
    if (buffer == null) dart.nullFailed(I[0], 15, 20, "buffer");
    let bigEndian = opts && 'bigEndian' in opts ? opts.bigEndian : false;
    if (bigEndian == null) dart.nullFailed(I[0], 16, 13, "bigEndian");
    let offset = opts && 'offset' in opts ? opts.offset : 0;
    if (offset == null) dart.nullFailed(I[0], 16, 37, "offset");
    let length = opts && 'length' in opts ? opts.length : null;
    this[buffer$] = buffer;
    this[bigEndian$] = bigEndian;
    this[offset$] = offset;
    this[start] = offset;
    this[end] = length == null ? buffer[$length] : dart.notNull(offset) + dart.notNull(length);
    ;
  }).prototype = input_buffer.InputBuffer.prototype;
  (input_buffer.InputBuffer.from = function(other, opts) {
    if (other == null) dart.nullFailed(I[0], 21, 32, "other");
    let offset = opts && 'offset' in opts ? opts.offset : 0;
    if (offset == null) dart.nullFailed(I[0], 21, 44, "offset");
    let length = opts && 'length' in opts ? opts.length : null;
    this[buffer$] = other.buffer;
    this[offset$] = dart.notNull(other.offset) + dart.notNull(offset);
    this[start] = other.start;
    this[end] = length == null ? other.end : dart.notNull(other.offset) + dart.notNull(offset) + dart.notNull(length);
    this[bigEndian$] = other.bigEndian;
    ;
  }).prototype = input_buffer.InputBuffer.prototype;
  dart.addTypeTests(input_buffer.InputBuffer);
  dart.addTypeCaches(input_buffer.InputBuffer);
  dart.setMethodSignature(input_buffer.InputBuffer, () => ({
    __proto__: dart.getMethods(input_buffer.InputBuffer.__proto__),
    rewind: dart.fnType(dart.void, []),
    _get: dart.fnType(core.int, [core.int]),
    _set: dart.fnType(dart.void, [core.int, core.int]),
    memcpy: dart.fnType(dart.void, [core.int, core.int, dart.dynamic], [core.int]),
    memset: dart.fnType(dart.void, [core.int, core.int, core.int]),
    subset: dart.fnType(input_buffer.InputBuffer, [core.int], {offset: core.int, position: dart.nullable(core.int)}, {}),
    indexOf: dart.fnType(core.int, [core.int], [core.int]),
    peekBytes: dart.fnType(input_buffer.InputBuffer, [core.int], [core.int]),
    skip: dart.fnType(dart.void, [core.int]),
    readByte: dart.fnType(core.int, []),
    readInt8: dart.fnType(core.int, []),
    readBytes: dart.fnType(input_buffer.InputBuffer, [core.int]),
    readString: dart.fnType(core.String, [], [dart.nullable(core.int)]),
    readUint16: dart.fnType(core.int, []),
    readInt16: dart.fnType(core.int, []),
    readUint24: dart.fnType(core.int, []),
    readUint32: dart.fnType(core.int, []),
    readInt32: dart.fnType(core.int, []),
    readFloat32: dart.fnType(core.double, []),
    readFloat64: dart.fnType(core.double, []),
    readUint64: dart.fnType(core.int, []),
    toList: dart.fnType(core.List$(core.int), [], [core.int, core.int]),
    toUint8List: dart.fnType(typed_data.Uint8List, [], [core.int, dart.nullable(core.int)]),
    toUint32List: dart.fnType(typed_data.Uint32List, [], [core.int])
  }));
  dart.setGetterSignature(input_buffer.InputBuffer, () => ({
    __proto__: dart.getGetters(input_buffer.InputBuffer.__proto__),
    position: core.int,
    length: core.int,
    isEOS: core.bool
  }));
  dart.setLibraryUri(input_buffer.InputBuffer, I[1]);
  dart.setFieldSignature(input_buffer.InputBuffer, () => ({
    __proto__: dart.getFields(input_buffer.InputBuffer.__proto__),
    buffer: dart.fieldType(core.List$(core.int)),
    start: dart.finalFieldType(core.int),
    end: dart.finalFieldType(core.int),
    offset: dart.fieldType(core.int),
    bigEndian: dart.fieldType(core.bool)
  }));
  dart.trackLibraries("packages/image/src/util/input_buffer.dart", {
    "package:image/src/util/input_buffer.dart": input_buffer
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["input_buffer.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../D:/packages/image/src/util/input_buffer.dart.lib.js"}');
  // Exports:
  return {
    src__util__input_buffer: input_buffer
  };
}));

//# sourceMappingURL=input_buffer.dart.lib.js.map
